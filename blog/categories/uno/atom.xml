<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: UNO | 粗茶ですが]]></title>
  <link href="http://0cha.github.io/blog/categories/uno/atom.xml" rel="self"/>
  <link href="http://0cha.github.io/"/>
  <updated>2013-08-17T12:14:52+09:00</updated>
  <id>http://0cha.github.io/</id>
  <author>
    <name><![CDATA[0cha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ATTiny4313にArduinoUNO R3で書き込む]]></title>
    <link href="http://0cha.github.io/blog/2013/08/16/t4313-arduinoisp/"/>
    <updated>2013-08-16T21:16:00+09:00</updated>
    <id>http://0cha.github.io/blog/2013/08/16/t4313-arduinoisp</id>
    <content type="html"><![CDATA[<p>手軽なMIDIインターフェースが欲しくて、AVRで何かできないかと探してみたら<a href="http://morecatlab.akiba.coocan.jp/morecat_lab/MOCO.html">USB-MIDIコンバーター MICOMOCO</a>なるものを発見。</p>

<p>なにこれ素敵。</p>

<p>早速ATTiny4313ともろもろの部品揃えてさぁやろうと思ったんだけど、考えてみたらAVRのISPプログラマー持ってない。</p>

<p>調べてみると<a href="http://arduino.cc/en/Main/arduinoBoardUno">Arduino IDE</a>にArduinoISPというスケッチがあって、<a href="http://www.geocities.jp/arduino_diecimila/use/arduino_dev.html">ArduinoがISPの代わりをしてくれるらしい。</a></p>

<p>幸いな事に<a href="http://www.switch-science.com/catalog/789/">Arduino UNO R3</a>は持っているので、ISPの問題は解決。が、Arduino IDE Ver 1.05が中で使っているGCCのバージョン(4.3.2)が古いらしく、
ATTiny4313を知らずスケッチのビルドに失敗する。</p>

<p>Oh&hellip;.</p>

<p>という事で、新しいGCCをArduinoIDEに突っ込む備忘録。</p>

<!-- more -->


<h2>環境</h2>

<p>OSX Lion 10.7.5</p>

<p>Arduino IDE 1.05</p>

<h2>CrossPack</h2>

<p>AVR向けののGCCをビルドする方法はそんなに難しくなく、情報はごろごろ出てくる。が、不治の病である面倒くさい病にかかっているため他の手がないかggrggr。</p>

<p>調べてみると<a href="http://www.obdev.at/products/crosspack/index.html">CrossPack for AVR</a>なるAVRの開発ツール一式が提供されてる。</p>

<p>リリースノートを見てみると</p>

<p></p>

<pre><code>Release Notes
Version 2013-02-12

Header with I/O definitions for ATTiny4313 was inconsistent with data sheet. Fixed.
</code></pre>

<p></p>

<p>・・・対応してんじゃん。</p>

<p>しかもGCC 4.6.2。</p>

<p>ということで上記のサイトからCrossPackのMac版をインストール。</p>

<p>/usr/local/CrossPack-AVR-20130212</p>

<p>上記のパスにインストールされる。</p>

<p>中を覗いてみると、Aruidno.appの以下のパスの中とほとんど一緒。これは勝てる。</p>

<p>/Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr</p>

<p>どーん</p>

<p></p>

<pre><code>$ sudo cp -R /usr/local/CrossPack-AVR-20130212/* /Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr&amp;nbsp;
</code></pre>

<p></p>

<h2>Tinyな情報</h2>

<p>ArduinoIDEがTinyなAVRの情報をもっていないので、その情報を追加。</p>

<p><a href="http://code.google.com/p/arduino-tiny/downloads/list">arduino-tiny</a></p>

<p>上記から、coreとかarduino-tinyとか取ってきて、Arduinoのドキュメントフォルダに突っ込めば終了。</p>

<p>後はこの<a href="http://jimlaurwilliams.org/wordpress/?p=1883">記事</a>でも参考にすればOK。</p>

<h2>実は</h2>

<p>頑張ったけどArduinoIDE使わない(使えない)・・・。</p>

<p>ArduinoIDEはスケッチをビルドしてAVRに書き込んでくれるけど、上記のMICOMOCOはCのソースで提供されているのでArduinoIDE用のスケッチはない。</p>

<p>Makefileは提供されているのでCrossPack for AVRさえ入れてbinにパス通してしまえば</p>

<p></p>

<pre><code>$ make
$ make flash
</code></pre>

<p></p>

<p>でいけちゃう。</p>

<p>今回のようにArduinoISPを使う場合は、micomocoフォルダのMakefile21行目</p>

<p></p>

<pre><code>AVRDUDE = avrdude -c usbtiny -p$(MCU)
</code></pre>

<p>
を
</p>

<pre><code>AVRDUDE = avrdude -c arduino -p$(MCU)
</code></pre>

<p>
に変更すればmake flashでArduinoISP経由でHEXが書き込まれます。</p>

<p>勉強になったなぁ。</p>
]]></content>
  </entry>
  
</feed>
