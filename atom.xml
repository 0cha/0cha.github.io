<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[粗茶ですが]]></title>
  <link href="http://0cha.github.io/atom.xml" rel="self"/>
  <link href="http://0cha.github.io/"/>
  <updated>2013-12-16T14:32:02+09:00</updated>
  <id>http://0cha.github.io/</id>
  <author>
    <name><![CDATA[0cha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Logic Pro X: Scripterプラグインの使い方 その1]]></title>
    <link href="http://0cha.github.io/blog/2013/08/20/logic-pro-x-scriptor-1/"/>
    <updated>2013-08-20T16:11:00+09:00</updated>
    <id>http://0cha.github.io/blog/2013/08/20/logic-pro-x-scriptor-1</id>
    <content type="html"><![CDATA[<p><a href="https://www.apple.com/jp/logic-pro/">Logic Pro X</a>では待望のMIDI FXが追加され、今までアルペジエータ1つ使うのに<a href="http://project-dtm.blogspot.jp/2011/06/logic-9.html">多大な苦労</a>をしていたのが大幅に改善されました。</p>

<p>デフォルトではアルペジエータをはじめランダマイザ、
コードトリガなどポピュラーなFXが用意されており、
デフォルトのFXだけでも非常に手軽で便利な物が揃ってます。</p>

<p>その中でも取り分けて面白いのが「Scripter」で、
MIDIのイベントをJavaScriptで加工する事が出来るというMIDIでStutterやりたい人にしか需要がなさそうなFXですw</p>

<p>今回はさわりだけ説明したいと思いますが、JavaScriptを多少知っていないと辛い内容です。。。。そして知ってる人にはリファレンス読めば十分という何とも中途半端・・・。</p>

<!-- more -->


<h2>基本的な使い方</h2>

<p>「ソフトウェア音源」か「外部 MIDI」トラックを追加して、
追加したトラックのミキサーで「MIDI FX」=> 「Scripter」を選択すればそのトラックにScripterが追加されます。</p>

<p><img src="http://0cha.github.io/images/logic/scripter_mixer.png" title="Scripterを設定" alt="Scripterを設定"></p>

<p>Scripterのウィンドウが開くので、「Open Script in Editor」を選択すると以下のコードが記述されたエディタが表示されて、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">HandleMIDI</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">event</span><span class="p">.</span><span class="nx">trace</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">event</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の状態で、「Run Script」ボタンを押した後に、MIDIキーボードとかMIDIコン弄るとコンソールにばーっとMIDIイベントが出力されます。</p>

<p>また、ソフトウェア音源を設定するか、MIDI音源を接続している場合、押した鍵盤の音やMIDIコンから送られたCC等が音源に適用されます。</p>

<p><img src="http://0cha.github.io/images/logic/scripter_default.png" width="628" height="628" title="Script Editor" alt="Script Editor"></p>

<h2>何が起きているのか</h2>

<p>MIDI入力があった際に「HandleMIDI()」関数が自動的に呼ばれて、入力されたMIDIイベントのインスタンスが
引数である「event」変数に格納されます。</p>

<p>event変数に入るMIDIのイベント情報は、いろいろなオブジェクトのインスタンスになっており、
HandleMIDI()関数内でevent変数に格納されたインスタンスが持つメソッドなどを操作することにより様々な処理を施すことができます。</p>

<p>デフォルトのコードであれば以下の部分ですね。</p>

<pre>
  event.trace(); // trace()メソッドはeventに格納されているMIDI情報をコンソールに出力する
  event.send();  // send()メソッドはeventに格納されているMIDI情報を音源に出力する
</pre>


<p>インスタンスによって様々なメソッドが用意されており、
例えば、入力されたノート(鍵盤情報)の3度上のノートを出力するには以下の様なコードになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">HandleMIDI</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">event</span><span class="p">.</span><span class="nx">trace</span><span class="p">();</span> <span class="c1">// MIDI情報をコンソールに出力</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">event</span> <span class="k">instanceof</span> <span class="nx">Note</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// eventの中身がNoteオブジェクトのインスタンスだったら</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">pitch</span> <span class="o">+=</span> <span class="mi">4</span><span class="p">;</span>          <span class="c1">// 3度上のピッチにする</span>
</span><span class='line'>                               <span class="c1">// Cのノートだった場合の加算する値と加算後のノートの関係は以下となる</span>
</span><span class='line'>                               <span class="c1">// += 1  C#</span>
</span><span class='line'>                               <span class="c1">// += 2  D</span>
</span><span class='line'>                               <span class="c1">// += 3  D#</span>
</span><span class='line'>                               <span class="c1">// += 4  E</span>
</span><span class='line'>                               <span class="c1">// += 5  F</span>
</span><span class='line'>                               <span class="c1">// += 6  F#</span>
</span><span class='line'>                               <span class="c1">// += 7  G</span>
</span><span class='line'>                               <span class="c1">// += 8  G#</span>
</span><span class='line'>                               <span class="c1">// += 9  A</span>
</span><span class='line'>                               <span class="c1">// += 10 A#</span>
</span><span class='line'>                               <span class="c1">// += 11 B</span>
</span><span class='line'>                               <span class="c1">// += 12 C +1oct</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">event</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>  <span class="c1">// MIDI情報を音源に送る</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>4行目のif文で「instanceof」演算子を使って、event変数に格納されたインスタンスが「Note」オブジェクトであるかどうか判定をし、
Noteオブジェクトであった場合event.pitchプロパティの値に+4します。
そして、20行目のevent.send();で音源にMIDI情報が送られ、3度上の音が鳴るわけですね。</p>

<h2>オブジェクトたち</h2>

<p>鍵盤を押したり離したりした時にコンソールを見てみると、</p>

<blockquote>
  <strong>[NoteOn channel:1 pitch:62 [D3] velocity: 88]</strong><br />
  <strong>[NoteOff channle: 1 pitch:62 [D3] velocity: 64]</strong>
</blockquote>


<p>この様なログが出力されていると思います。
このログは3行目のevent.trace();によって出力されているevent変数に入っているMIDI情報ですが、NoteOnとNoteOffの二つの情報であることがわかります。</p>

<p>Scripterで用意されている各種オブジェクトは、MIDIで使用されるイベント毎に用意されています。
これらについては後々紹介しようと思いますが、どんなオブジェクトがあるのかはScripterプラグインの<a href="https://help.apple.com/logicpro-effects/mac/10/#lgce0d0efc5a">ドキュメント</a>で知ることが出来ます。</p>

<p>NoteOnとNoteOffもそれぞれ同名のオブジェクトが存在し、NoteOnの情報の時はNoteOnオブジェクト、NoteOffの時はNoteOffオブジェクトが使用されます。</p>

<p>しかし、if文のinstanceof演算子では「Note」オブジェクトかどうかを判定していて、NoteOn/NoteOffオブジェクトかどうかの判定ではなさそうに見えます。</p>

<p>実はこれScripterプラグインのマニュアルには記載されいませんが(実装例でNoteオブジェクトが使われていますがNoteオブジェクトの事には触れられていません)、NoteオブジェクトはNoteOn/NoteOffオブジェクトのプロトタイプとなっているようです。</p>

<p>incetanceof演算子はプロトタイプチェーンも含めて判定してくれるので、NoteOnかNoteOffのどちらかが来てもNoteオブジェクトかどうかの判定をするだけで済むようになっているんですね。</p>

<p>ちなみに、Noteオブジェクトでの判定を行わない場合は以下の様なちょっとかっこ悪いコードになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">HandleMIDI</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">event</span><span class="p">.</span><span class="nx">trace</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span><span class="p">((</span><span class="nx">event</span> <span class="k">instanceof</span> <span class="nx">NoteOn</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">event</span> <span class="k">instanceof</span> <span class="nx">NoteOff</span><span class="p">)){</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">pitch</span> <span class="o">+=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">event</span><span class="p">.</span><span class="nx">send</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>どうでしょう</h2>

<p>ひとまずScripterがどのような物かのさわりだけは解ってもらえたかなと思います。</p>

<p>プリセットのスクリプトだけでも非常に楽しそうな事が出来るのが解りますが、自由自在に操れたらとても楽しそうだと思いませんか？</p>

<p>正直Logic使っててかつJavaScript知ってるという、どこに居るんだそんな人向けのプラグインですがやってみると意外と何とかなる物ですよ。</p>

<p>私もプログラミング自体が苦手なので、この文章を書くだけで四苦八苦しましたが・・・(^^;)</p>

<p>では、また次回!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ATTiny4313にArduinoUNO R3で書き込む]]></title>
    <link href="http://0cha.github.io/blog/2013/08/16/t4313-arduinoisp/"/>
    <updated>2013-08-16T21:16:00+09:00</updated>
    <id>http://0cha.github.io/blog/2013/08/16/t4313-arduinoisp</id>
    <content type="html"><![CDATA[<p>手軽なMIDIインターフェースが欲しくて、AVRで何かできないかと探してみたら<a href="http://morecatlab.akiba.coocan.jp/morecat_lab/MOCO.html">USB-MIDIコンバーター MICOMOCO</a>なるものを発見。</p>

<p>なにこれ素敵。</p>

<p>早速ATTiny4313ともろもろの部品揃えてさぁやろうと思ったんだけど、考えてみたらAVRのISPプログラマー持ってない。</p>

<p>調べてみると<a href="http://arduino.cc/en/Main/arduinoBoardUno">Arduino IDE</a>にArduinoISPというスケッチがあって、<a href="http://www.geocities.jp/arduino_diecimila/use/arduino_dev.html">ArduinoがISPの代わりをしてくれるらしい。</a></p>

<p>幸いな事に<a href="http://www.switch-science.com/catalog/789/">Arduino UNO R3</a>は持っているので、ISPの問題は解決。が、Arduino IDE Ver 1.05が中で使っているGCCのバージョン(4.3.2)が古いらしく、
ATTiny4313を知らずスケッチのビルドに失敗する。</p>

<p>Oh&hellip;.</p>

<p>という事で、新しいGCCをArduinoIDEに突っ込む備忘録。</p>

<!-- more -->


<h2>環境</h2>

<p>OSX Lion 10.7.5</p>

<p>Arduino IDE 1.05</p>

<h2>CrossPack</h2>

<p>AVR向けののGCCをビルドする方法はそんなに難しくなく、情報はごろごろ出てくる。が、不治の病である面倒くさい病にかかっているため他の手がないかggrggr。</p>

<p>調べてみると<a href="http://www.obdev.at/products/crosspack/index.html">CrossPack for AVR</a>なるAVRの開発ツール一式が提供されてる。</p>

<p>リリースノートを見てみると</p>

<pre><code>Release Notes
Version 2013-02-12

Header with I/O definitions for ATTiny4313 was inconsistent with data sheet. Fixed.
</code></pre>

<p>・・・対応してんじゃん。</p>

<p>しかもGCC 4.6.2。</p>

<p>ということで上記のサイトからCrossPackのMac版をインストール。</p>

<p>/usr/local/CrossPack-AVR-20130212</p>

<p>上記のパスにインストールされる。</p>

<p>中を覗いてみると、Aruidno.appの以下のパスの中とほとんど一緒。これは勝てる。</p>

<p>/Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr</p>

<p>どーん</p>

<pre><code>$ sudo cp -R /usr/local/CrossPack-AVR-20130212/* /Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr&amp;nbsp;
</code></pre>

<h2>Tinyな情報</h2>

<p>ArduinoIDEがTinyなAVRの情報をもっていないので、その情報を追加。</p>

<p><a href="http://code.google.com/p/arduino-tiny/downloads/list">arduino-tiny</a></p>

<p>上記から、coreとかarduino-tinyとか取ってきて、Arduinoのドキュメントフォルダに突っ込めば終了。</p>

<p>後はこの<a href="http://jimlaurwilliams.org/wordpress/?p=1883">記事</a>でも参考にすればOK。</p>

<h2>実は</h2>

<p>頑張ったけどArduinoIDE使わない(使えない)・・・。</p>

<p>ArduinoIDEはスケッチをビルドしてAVRに書き込んでくれるけど、上記のMICOMOCOはCのソースで提供されているのでArduinoIDE用のスケッチはない。</p>

<p>Makefileは提供されているのでCrossPack for AVRさえ入れてbinにパス通してしまえば</p>

<pre><code>$ make
$ make flash
</code></pre>

<p>でいけちゃう。</p>

<p>今回のようにArduinoISPを使う場合は、micomocoフォルダのMakefile21行目</p>

<pre><code>AVRDUDE = avrdude -c usbtiny -p$(MCU)
</code></pre>

<p>を</p>

<pre><code>AVRDUDE = avrdude -c arduino -p$(MCU)
</code></pre>

<p>に変更すればmake flashでArduinoISP経由でHEXが書き込まれます。</p>

<p>勉強になったなぁ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logic Pro Xで32bitプラグインを使う]]></title>
    <link href="http://0cha.github.io/blog/2013/08/15/32bit-plugin/"/>
    <updated>2013-08-15T09:53:00+09:00</updated>
    <id>http://0cha.github.io/blog/2013/08/15/32bit-plugin</id>
    <content type="html"><![CDATA[<p><a href="https://www.apple.com/jp/logic-pro/">Logic Pro X</a>になって、AUプラグインが64bit専用になってしまいました。</p>

<p>トリッキーな方法だけど、AU Labを使えば<a href="http://www.macprovideo.com/hub/logic-pro/how-to-run-32-bit-plug-ins-in-logic-pro-x">出来るらしい</a>。どうなんだろうこれ。</p>
]]></content>
  </entry>
  
</feed>
